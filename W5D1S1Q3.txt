W5D1S1Q3


import form module

app.comp.html
<app-todo-list></app-todo-list>>
  
html
<h1>To-Do List</h1>

<form (submit)="addTask(taskInput.value); $event.preventDefault()">
    <input type="text" #taskInput placeholder="Task title" required/>
    <button type="submit">Add Task</button>
</form>
<ul>
    <li *ngFor="let task of tasks$ | async">
        <p [ngClass]="{'completed':task.completed}">{{task.title}}</p>
        <button (click)="toggleTask(task.id)">{{task.completed ? 'Undo' : 'Complete'}}</button>
    </li>
</ul>

ts
import { Component, OnInit } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

interface Task{
  id:number,
  title:string,
  completed:boolean
}

@Component({
  selector: 'app-todo-list',
  templateUrl: './todo-list.component.html',
  styleUrls: ['./todo-list.component.css']
})
export class TodoListComponent implements OnInit {

  tasks:{id:number, title:string, completed:boolean}[]=[];
  private tasksSubject = new BehaviorSubject<Task[]>([]);
  tasks$ : Observable<Task[]> = this.tasksSubject.asObservable()
  constructor() { }

  ngOnInit(): void {
    this.tasksSubject.next(this.tasks);
  }

  addTask(title:string):void{
    const task:Task = {
      id:this.tasks.length+1,
      title:title,
      completed:false
    }
    console.log(task)
    this.tasks = [...this.tasks,task];
    this.tasksSubject.next(this.tasks)
  }
  toggleTask(taskId: number):void{
    const ans = this.tasks.find(task => task.id === taskId);
    ans.completed = !ans.completed;
  }
}


css
.completed{
    text-decoration: line-through;
}
